---
title: 'Walkthroughs and Exercises for GenAi-Powered Data Analysis in Python'  
author: "Dr. Chester Ismay"  
#format: html
#engine: knitr 
engine: jupyter
format:
  ipynb: default
---

# Data Analytics Kickoff + Course Goals

## Walkthrough #1: Setting Up the Python Environment

If you haven't already installed Python, Jupyter, and the necessary packages, there are instructions on the course repo in the README to do so [here](https://github.com/ismayc/oreilly-genai-powered-data-analysis-with-python/blob/main/README.md). 

If you aren't able to do this on your machine, you may want to check out [Google Colab](https://colab.research.google.com/). It's a free service that allows you to run Jupyter notebooks in the cloud.

```{python}
import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sns
import plotly.express as px
import plotly.graph_objects as go
from plotly.subplots import make_subplots
```

```{python}
# For plotly to load directly in Jupyter notebook
import plotly.offline as pyo
pyo.init_notebook_mode(connected=True)
```

## Exercise #1: Setting Up the Python Environment

Follow the instructions above in Walkthrough #1 to check for correct installation 
of necessary packages. We'll wait a few minutes to make sure as many of you are
set up as possible. Please give a thumbs up in the pulse check if you are ready
to move on.

We'll work with ChatGPT as our GenAI tool. If you are getting errors at this
point and would like to ask it for assistance, go for it! We'll make more use
of it throughout the course, and I'll give tips along the way too.

---

# _Day 1: Prompt to Wrangle_

---

# Module 1: Data Wrangling with Pandas

## Walkthrough #2: Cleaning and Preparing Data with Pandas

### Import data from a CSV or from an Excel file

```{python}
# Load the data from a CSV file


```

### Perform an initial exploration of the data

```{python}
# Display the first few rows of the DataFrame


```

```{python}
# Display the information about the DataFrame


```

```{python}
# Display summary statistics of the DataFrame


```

### Handle missing data

#### Remove rows

```{python}
# Remove rows with any missing values


```

```{python}
# Remove rows with missing values in specific columns


```

#### Replace missing values with specific value

```{python}
#| eval: false
# Replace missing values with a specific value (e.g., 0 for numerical columns, 'Unknown' for categorical columns)
economies_fill_value = economies.fillna({
    'gdp_percapita': 0,
    'gross_savings': 0,
    'inflation_rate': 0,
    'total_investment': 0,
    'unemployment_rate': 0,
    'exports': 0,
    'imports': 0,
    'income_group': 'Unknown'
})

# Display the DataFrame after replacing missing values with specific values

```

### Convert a column to a different data type

```{python}
# Change year to be a string instead of an integer


# Display the information on the DataFrame with year as a string


```

```{python}
# Change the year of string type back to integer


# Display the information on the DataFrame with year as an integer


```

### Rename a column

```{python}
# Rename the 'income_group' column to 'income_category'


```

### Filtering rows based on conditions

#### Conditions on a single column

```{python}
# Filter rows where 'gdp_percapita' is greater than 20,000


```

```{python}
# Filter rows where 'income_group' is 'High income'


```

#### Conditions on multiple columns

```{python}
# Filter rows where inflation_rate is less than 0 and income_group is 'Low income'


```

## Exercise #2: Cleaning and Preparing Data with Pandas

```{python}
# Load the populations data from a CSV file


```

```{python}
# Examine the first few rows


```

```{python}
# Display the information about the DataFrame


```

```{python}
# Display summary statistics of the DataFrame


```


### Handle Missing Data

#### Remove rows

```{python}
# Remove rows with any missing values


```

```{python}
# Remove rows with missing values in fertility_rate and life_expectancy


```

#### Replace missing values with specific value

```{python}
# Replace missing values with a specific value (e.g., 0 for numerical columns, 
# 'Unknown' for categorical columns)





```

### Convert a Column to a Different Data Type and Rename a Column

#### Convert a Column to a Different Data Type

```{python}
# Convert the 'year' column to string type


```

```{python}
# Convert it back to integer


```

#### Rename a Column

```{python}
# Rename the 'fertility_rate' column to 'fertility'


```

#### Filter a DataFrame

```{python}
# Filter the DataFrame to include only rows where the 'continent' is 'Asia'


```

```{python}
# Filter the DataFrame to include only rows where the 'year' is 2020


```

```{python}
# Filter the DataFrame to include only rows where the 
# 'fertility_rate' is greater than 2


```

# Module 2: Transforming and Aggregating Data with Pandas

## Walkthrough #3: Summarizing Data with Pandas

### Grouping data

```{python}
# Get the mean gdp per capita for each income_group


```

### Applying Functions

#### Applying a function element-wise with `map()`

```{python}
# Convert income_group to uppercase using map()



```

#### Applying a Function to Groups with `groupby()` and `agg()`

```{python}
# Calculate the median gdp_percapita and inflation_rate for each income_group




```

### Summary tables

```{python}
# Create a pivot table of gdp_percapita and inflation_rate 
# by income_group and year






```

### Analyzing categorical data 

#### Using cross-tabulation

```{python}
# Show counts of income_group by year


```

#### By getting group counts

```{python}
# Count the occurrences of each income_group


```

## Exercise #3: Summarizing Data with Pandas

### Grouping Data

```{python}
# Group data by continent and calculate the mean life expectancy

```

### Applying Functions

#### Applying a function element-wise with `map()`

```{python}
# Convert continent to uppercase using map()




```

#### Applying a function to groups with `groupby()` and `agg()`

```{python}
# Calculate the median fertility rate and life expectancy for each continent




```

### Summary Tables

```{python}
# Create a pivot table of fertility rate and life expectancy by continent and year







```

### Analyzing Categorical Data

#### Using Cross-Tabulation

```{python}
# Create a cross-tabulation of continent and year

```

#### By Getting Group Counts

```{python}
# Count the occurrences of each region

```

---

# Module 3: Exploring and Learning from Mistakes

Use the provided prompt as your initial guide. Here are 8 Python errors that
you'll attempt to use LLMs to help you debug. Make sure to run the code in
Jupyter first and then try to debug!

## Walkthrough and Exercise #4: Debug with GenAI

```{python}
#| error: true

### 1

populations.hed
```

```{python}
#| error: true

### 2

populations.size.mean()
```

```{python}
#| error: true

### 3

populations['Life_Expectancy'].mean()
```

```{python}
#| error: true

### 4

asia = populations[populations['continent'] = 'Asia']
```

```{python}
#| error: true

### 5

populations[populations['continent'] == 'Asia' & populations['year'] == 2020]
```

```{python}
#| error: true

### 6

populations[populations['population_size'] > 1_000_000]
```

```{python}
#| error: true

### 7

populations['double_size'] = populations['size'].apply(lambda x: x * 2, axis=1)
```

```{python}
#| error: true

### 8

populations['fertility_rate'].fillna(0)
```

---

# _Day 2: Visualize to Tell_

---

# Module 4: Data Visualization Basics with Matplotlib and Seaborn

## Walkthrough #5: Data Visualization Techniques

### Line plot with Matplotlib

```{python}
# Filter data for a specific country


# Line plot of gdp_percapita over the years



```

### Bar chart with Matplotlib

```{python}
# Filter data for Caribbean countries and the year 2020



# Bar chart of gdp_percapita for different Caribbean countries in 2020







# Horizontal version




```

### Adding labels and titles

```{python}
# Filter data for a specific country


# Line plot of gdp_percapita over the years with labels and titles






```

### Adjusting axes and tick marks

```{python}
# Bar chart of gdp_percapita for different Caribbean countries in 2020 with 
# adjusted axes and tick marks






# Adjust axes


# Adjust tick marks



```

### Histogram with Seaborn

```{python}
# Histogram of gdp_percapita




```

### Boxplot with Seaborn

```{python}
# Boxplot of gdp_percapita by income_group






```

### Violin plot with Seaborn

```{python}
# Violin plot of gdp_percapita by income_group






```



## Exercise #5: Data Visualization Techniques

### Line Plot with Matplotlib

```{python}
# Filter data for India


# Line plot of fertility rate over the years




```

### Bar Chart with Matplotlib

```{python}
# Filter data for selected Asian countries and the year 2020
asian_countries = ['CHN', 'IND', 'IDN', 'PAK', 'BGD']


# Bar chart of population size for selected Asian countries in 2020



```

### Adding Labels and Titles

```{python}
# Filter data for Nigeria


# Line plot of life expectancy over the years with labels and titles






```

### Adjusting Axes and Tick Marks

```{python}
# Filter data for selected African countries ('NGA', 'ETH', 'EGY', 'ZAF', 'DZA')
# and the year 2020
african_countries = ['NGA', 'ETH', 'EGY', 'ZAF', 'DZA']


# Bar chart of fertility rate for selected African countries in 2020 with 
# adjusted axes and tick marks






# Adjust axes


# Adjust tick marks





```

### Histogram with Seaborn

```{python}
# Histogram of life expectancy






```

### Boxplot with Seaborn

```{python}
# Boxplot of fertility rate by continent






```

### Violin Plot with Seaborn

```{python}
# Violin plot of fertility rate by continent






```

---

# Module 5: Interactive Data Visualization with Plotly

## Walkthrough #6: Interactive Charts and Dashboards with Plotly

### Basic interactive chart

```{python}
# Filter data for a specific country


# Create an interactive line chart



```

### Adding interactive elements

```{python}
# Create an interactive scatter plot





# Add hover, zoom, and selection tools




```

### Designing a simple dashboard

```{python}
# Filter data for the year 2020


# Create a subplot figure with 1 row and 2 columns





# Line chart of GDP Per Capita for Afghanistan





# Bar chart of GDP Per Capita for different countries in 2020




# Update layout





```


## Exercise #6: Interactive Charts and Dashboards with Plotly

### Basic Interactive Chart

```{python}
# Filter data for a specific country (Brazil)


# Create an interactive line chart (Fertility Rate Over Years)



```

### Adding Interactive Elements

```{python}
# Create an interactive scatter plot





# Add hover, zoom, and selection tools



```

### Designing a Simple Dashboard

```{python}
# Filter data for the year 2020


# Create a subplot figure with 1 row and 2 columns





# Line chart of Life Expectancy for Brazil





# Bar chart of Life Expectancy for South American countries in 2020





# Update layout to add a title and hide the legend



```

